using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace INTECH_STOCK_EXCHANGE
{
    public class Market
    {
        bool _orderCount = false;
        List<Shareholder> _shareholders;
        List<Company> _companies;
        List<Order> _globalOrderbook;
        Order order;
        Company company;
        Timer round;
        List<MatchOrders> _matchOrders;
        public Dictionary<Guid, List<Order>> _sellOrders;
        public Dictionary<Guid, List<Order>> _buyOrders;

<<<<<<< HEAD
=======
        public List<MatchOrders> MatchOrders
        {
            get
            {
                return _matchOrders;
            }
        }
>>>>>>> f-matchOrders
        public Market()
        {
            _globalOrderbook = new List<Order>();
            _shareholders = new List<Shareholder>();
            _companies = new List<Company>();
<<<<<<< HEAD
=======
            _matchOrders = new List<MatchOrders>();


            //Need to decide here how long the company and shareholder lists should be!
            Company Google = new Company( this, "Google", Company.Industry.IT, 100.0M, 500 );
            //_companies.Add( Google );

            Shareholder Trader = new Shareholder( this, "Trader", 1000);
            Shareholder FatherOfTheYear = new Shareholder( this, "FatherOfTheYear", 500 );
            Shareholder StupidGuy = new Shareholder( this, "StupidGuy", 1000 );
            
            _shareholders.Add( Trader);
            _shareholders.Add( FatherOfTheYear );
            _shareholders.Add( StupidGuy );
            _shareholders.Add( new Shareholder(this, "Coco", 2000 ));
            _shareholders.Add( new Shareholder( this, "Camillou", 20000 ) );

            Trader.FillPortfolio( 25, Google );
            FatherOfTheYear.FillPortfolio( 25, Google );
            StupidGuy.FillPortfolio( 50, Google );
            _shareholders[3].FillPortfolio( 100, Google );
>>>>>>> f-matchOrders
        }

        public bool minimumOrderCount()
        {
            //Checking in the order book whether there is enough potential orders to open the market
            //If so, then _orderCount goes "true"
            if ( _globalOrderbook.Count > 20 )
            {
                return _orderCount = true;
            }
            else
            {
                return _orderCount;
            }
        }

        public List<Company> companyList
        {
            get { return _companies; }
        }
        public List<Shareholder> shareholderList
        {
            get { return _shareholders; }
        }
        public List<Order> globalOrderbook
        {
            get { return _globalOrderbook; }
            set { _globalOrderbook = value; }
        }

        public void start()
        {
            round.Enabled = true;
            round.Start();
            round.Interval = 2500; //0.5 times the order timout

        }

        public void SellBuy()
        {
            int nbtransactions;
            int nbselltransaction;
            int nbbuytransaction;

            foreach (Company c in _companies)
            {
                nbtransactions = 0;
                nbselltransaction = 0;

                foreach (Order o in _sellOrders[c.GetID])
                {
                    if (o.GetOrderPriceProposal <= c.GetSharePrice)
                    {
                        nbselltransaction += o.GetOrderShareQuantity;
                    }
                }

                nbbuytransaction = 0;
                foreach (Order o in _buyOrders[c.GetID])
                {
                    if (o.GetOrderPriceProposal >= c.GetSharePrice)
                    {
                        nbbuytransaction += o.GetOrderShareQuantity;
                    }
                }

                if (nbbuytransaction > nbselltransaction)
                {
                    nbtransactions = nbselltransaction;
                }
                else
                {
                    nbtransactions = nbbuytransaction;
                }

                int tmp = nbtransactions;
                foreach (Order o in _sellOrders[c.GetID])
                {
                    if (o.GetOrderPriceProposal <= c.GetSharePrice)
                    {
                        for (int i = 0; i < _shareholders.Count ;i++)
                        {
                            if (_shareholders[i].GetID == o.OrderBuyerID)
                            {
                                if (tmp > o.GetOrderShareQuantity)
                                {
                                    _shareholders[i].Capital += c.GetSharePrice * o.GetOrderShareQuantity;
                                    tmp -= o.GetOrderShareQuantity;
                                    // retirer actions dans portfolio
                                }
                                else
                                {
                                    _shareholders[i].Capital += c.GetSharePrice * tmp;
                                    tmp = 0;
                                    // retirer actions dans portfolio
                                }
                            }
                        }
                    }
                }

                tmp = nbtransactions;
                foreach (Order o in _buyOrders[c.GetID])
                {
                    if (o.GetOrderPriceProposal >= c.GetSharePrice)
                    {
                        for (int i = 0; i < _shareholders.Count; i++)
                        {
                            if (_shareholders[i].GetID == o.OrderBuyerID)
                            {
                                if (tmp > o.GetOrderShareQuantity)
                                {
                                    _shareholders[i].Capital -= c.GetSharePrice * o.GetOrderShareQuantity;
                                    tmp -= o.GetOrderShareQuantity;
                                    _shareholders[i].FillPortfolio( o.GetOrderShareQuantity, c );
                                }
                                else
                                {
                                    _shareholders[i].Capital -= c.GetSharePrice * tmp;
                                    tmp = 0;
                                    _shareholders[i].FillPortfolio( tmp, c );
                                }
                            }
                        }
                    }
                }
            }
        }

        public void SortOrders()
        {
<<<<<<< HEAD
            round.Enabled = true;
            round.Start();
            round.Interval = 2500; //0.5 times the order's timout
=======
            _sellOrders = new Dictionary<Guid,List<Order>>();
            _buyOrders = new Dictionary<Guid, List<Order>>();
>>>>>>> f-matchOrders

            foreach (Company c in _companies)
            {
                _sellOrders.Add( c.GetID, new List<Order>() );
                _buyOrders.Add( c.GetID, new List<Order>() );
            }

            foreach (Order o in _globalOrderbook)
            {
                if (o._orderType == Order.orderType.Buy)
                {
                    _buyOrders[o.GetSharesCompanyID].Add( o );
                }
                else
                {
                    _sellOrders[o.GetSharesCompanyID].Add( o );
                }
            }
        }

        public void DefineNewPrice()
        {
            Dictionary<decimal, int> nbtransactions = new Dictionary<decimal,int>();
            int nbselltransaction;
            int nbbuytransaction = 0;
            decimal priceTransaction = 0;
            int nbtransaction = 0;

            SortOrdersByPrice();

            foreach (Company c in companyList)
            {
                for (int i = 0; i < _buyOrders[c.GetID].Count ;i++)
                {
                    nbbuytransaction += _buyOrders[c.GetID][i].GetOrderShareQuantity;
                    nbselltransaction = 0;

                    for (int j = 0; j < _sellOrders[c.GetID].Count && _sellOrders[c.GetID][j].GetOrderPriceProposal >= _buyOrders[c.GetID][i].GetOrderPriceProposal ;j++)
                    {
                        nbselltransaction += _sellOrders[c.GetID][j].GetOrderShareQuantity;
                    }

                    if (nbselltransaction < nbbuytransaction)
                    {
                        nbtransactions.Add( _buyOrders[c.GetID][i].GetOrderPriceProposal, nbselltransaction );
                    }
                    else
                    {
                        nbtransactions.Add( _buyOrders[c.GetID][i].GetOrderPriceProposal, nbbuytransaction );
                    }
                }

                foreach (var p in nbtransactions)
                {
                    if (p.Value > nbtransaction)
                    {
                        nbtransaction = p.Value;
                        priceTransaction = p.Key;
                    }
                    c.GetSharePrice = priceTransaction;
                }
            }
        }

        public void SortOrdersByPrice()
        {
            Order tmp;
            foreach (var keyvalue in _buyOrders)
            {
                for (int i = 0; i < keyvalue.Value.Count; i++)
                {
                    for (int j = i + 1; j < keyvalue.Value.Count; j++)
                    {
                        if (keyvalue.Value[i].GetOrderPriceProposal > keyvalue.Value[j].GetOrderPriceProposal)
                        {
                            tmp = keyvalue.Value[i];
                            keyvalue.Value[i] = keyvalue.Value[j];
                            keyvalue.Value[j] = tmp;
                        }
                    }
                }
            }
            foreach (var keyvalue in _sellOrders)
            {
                for (int i = 0; i < keyvalue.Value.Count; i++)
                {
                    for (int j = i + 1; j < keyvalue.Value.Count; j++)
                    {
                        if (keyvalue.Value[i].GetOrderPriceProposal > keyvalue.Value[j].GetOrderPriceProposal)
                        {
                            tmp = keyvalue.Value[i];
                            keyvalue.Value[i] = keyvalue.Value[j];
                            keyvalue.Value[j] = tmp;
                        }
                    }
                }
            }
        }

        public void addOrUpdate( EventArgs e, Order order )
        //Once a deal's been made:
        //- Receiving and adding or removing new/old orders from the orderbook, 
        //- Updating portfolios and capitals (companies and shareholders),
        //- Updating share prices and variations,
        //- More updates to come...
        {               
            foreach ( Order x in _globalOrderbook )
            {
                if ( x.Done == true )
                {
                    foreach ( Company c in _companies )
                    {
                        if ( x.GetOrderMakerID == c.GetID ) //   [ALL THIS FUNCTION NEEDS AN UPDATE SINCE A LOT OF NAMES HAVE CHANGED] but the main idea's still good
                        {
                            if ( x.GetOrderType == 0 )//Buy
                            {
                                //sharestock++, capital--
                                //            c.Capital = c.Capital - x.GetOrderTotalPriceProposal;
                                //            c.Portfolio.AddRange( x.GetOrderShares );
                                //        }
                                //        else if ( x.GetOrderType == 1 )//Sell
                                //        {
                                //            //sharestock--, capital++
                                //            c.Capital = c.Capital + x.GetOrderTotalPriceProposal;
                                //            c.Portfolio.RemoveAll(Share => Share.OrderID == x.GetOrderId);
                                //        }
                                //    }
                                //    else if ( x.OrderBuyerID == c.GetID )
                                //    {
                                //        if ( x.GetOrderType == 0 )
                                //        {
                                //            //sharestock--, capital++
                                //            c.Capital = c.Capital + x.GetOrderTotalPriceProposal;
                                //            c.Portfolio.RemoveAll( Share => Share.OrderID == x.GetOrderId );
                                //        }
                                //        else if ( x.GetOrderType == 1 )
                                //        {
                                //            //sharestock++, capital--
                                //            c.Capital = c.Capital - x.GetOrderTotalPriceProposal;
                                //            c.Portfolio.AddRange( x.GetOrderShares );
                                //        }
                                //    }
                                //}
                                ///*Need to implement price evolution here! */
                                //foreach(Shareholder s in _shareholders)
                                //{
                                //    if ( x.GetOrderMakerID == s.GetID )
                                //    {
                                //        if ( x.GetOrderType == 0 )//Buy
                                //        {
                                //            //sharestock++, capital--
                                //            s.Capital = s.Capital - x.GetOrderTotalPriceProposal;
                                //            s.Portfolio.AddRange( x.GetOrderShares );
                                //        }
                                //        else if ( x.GetOrderType == 1 )//Sell
                                //        {
                                //            //sharestock--, capital++
                                //            s.Capital = s.Capital + x.GetOrderTotalPriceProposal;
                                //            s.Portfolio.RemoveAll( Share => Share.OrderID == x.GetOrderId );
                                //        }
                                //    }
                                //    else if ( x.OrderBuyerID == s.GetID )
                                //    {
                                //        if ( x.GetOrderType == 0 )
                                //        {
                                //            //sharestock--, capital++
                                //            s.Capital = s.Capital + x.GetOrderTotalPriceProposal;
                                //            s.Portfolio.RemoveAll( Share => Share.OrderID == x.GetOrderId );
                                //        }
                                //        else if ( x.GetOrderType == 1 )
                                //        {
                                //            //sharestock++, capital--
                                //            s.Capital = s.Capital - x.GetOrderTotalPriceProposal;
                                //            s.Portfolio.AddRange( x.GetOrderShares );
                                //        }
                            }
                        }
                        _globalOrderbook.Remove( x );//Removing the order from the orderbook since the deal's done
                    }
                }
            }
        }
    }

    public class MatchOrders
    {
        Guid[] _sellerBuyer;
        public Guid IdSeller { get { return _sellerBuyer[1]; } }
        public Guid IdBuyer
        { 
            get 
            {
                return _sellerBuyer[0];
            } 
        }

        public MatchOrders(Guid idSeller, Guid idBuyer)
        {
            Guid[] tmp = { idSeller, idBuyer};
            _sellerBuyer = tmp;
        }

    }
}
